
#include "JT808/MessageBody/RSAPublicKey.h"
#include "MessageBodyBaseTest.h"

namespace JT808::MessageBody {
class RSAPublicKeyTest : public MessageBodyBaseTest<RSAPublicKey>
{
protected:
    ~RSAPublicKeyTest() override { }

    void SetUp() override
    {
        std::string key("-----BEGIN PUBLIC KEY-----"
                        "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCCTOD1oUQv3q9hpxqD2DJEoCts"
                        "T3AWDingoSG+otiv9cajWX+INkQ/tb1EGirP5aXKf+w+dkMnO0xCIQ+gTk1fMjHt"
                        "4MH0J4kEi+FN+VxZsx9A4oZSBpdak33XjqHUViuDPTXhYK/GGH7xjSDMlsKMEMc0"
                        "1TOeXlyFs2bk9FhLJwIDAQAB"
                        "-----END PUBLIC KEY-----");

        std::vector<uint8_t> data(key.begin(), key.end());
        m_body = new RSAPublicKey(data);
        m_rawData = {
            0x0,  0x0,  0x1,  0xa,  0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x50, 0x55, 0x42,
            0x4c, 0x49, 0x43, 0x20, 0x4b, 0x45, 0x59, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x4d, 0x49, 0x47, 0x66, 0x4d, 0x41,
            0x30, 0x47, 0x43, 0x53, 0x71, 0x47, 0x53, 0x49, 0x62, 0x33, 0x44, 0x51, 0x45, 0x42, 0x41, 0x51, 0x55, 0x41,
            0x41, 0x34, 0x47, 0x4e, 0x41, 0x44, 0x43, 0x42, 0x69, 0x51, 0x4b, 0x42, 0x67, 0x51, 0x43, 0x43, 0x54, 0x4f,
            0x44, 0x31, 0x6f, 0x55, 0x51, 0x76, 0x33, 0x71, 0x39, 0x68, 0x70, 0x78, 0x71, 0x44, 0x32, 0x44, 0x4a, 0x45,
            0x6f, 0x43, 0x74, 0x73, 0x54, 0x33, 0x41, 0x57, 0x44, 0x69, 0x6e, 0x67, 0x6f, 0x53, 0x47, 0x2b, 0x6f, 0x74,
            0x69, 0x76, 0x39, 0x63, 0x61, 0x6a, 0x57, 0x58, 0x2b, 0x49, 0x4e, 0x6b, 0x51, 0x2f, 0x74, 0x62, 0x31, 0x45,
            0x47, 0x69, 0x72, 0x50, 0x35, 0x61, 0x58, 0x4b, 0x66, 0x2b, 0x77, 0x2b, 0x64, 0x6b, 0x4d, 0x6e, 0x4f, 0x30,
            0x78, 0x43, 0x49, 0x51, 0x2b, 0x67, 0x54, 0x6b, 0x31, 0x66, 0x4d, 0x6a, 0x48, 0x74, 0x34, 0x4d, 0x48, 0x30,
            0x4a, 0x34, 0x6b, 0x45, 0x69, 0x2b, 0x46, 0x4e, 0x2b, 0x56, 0x78, 0x5a, 0x73, 0x78, 0x39, 0x41, 0x34, 0x6f,
            0x5a, 0x53, 0x42, 0x70, 0x64, 0x61, 0x6b, 0x33, 0x33, 0x58, 0x6a, 0x71, 0x48, 0x55, 0x56, 0x69, 0x75, 0x44,
            0x50, 0x54, 0x58, 0x68, 0x59, 0x4b, 0x2f, 0x47, 0x47, 0x48, 0x37, 0x78, 0x6a, 0x53, 0x44, 0x4d, 0x6c, 0x73,
            0x4b, 0x4d, 0x45, 0x4d, 0x63, 0x30, 0x31, 0x54, 0x4f, 0x65, 0x58, 0x6c, 0x79, 0x46, 0x73, 0x32, 0x62, 0x6b,
            0x39, 0x46, 0x68, 0x4c, 0x4a, 0x77, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45,
            0x4e, 0x44, 0x20, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x20, 0x4b, 0x45, 0x59, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d};
    }
};

TEST_F(RSAPublicKeyTest, TestParseSuccess)
{
    TestParse();
}

TEST_F(RSAPublicKeyTest, TestPackage)
{
    TestPackage();
}

}
